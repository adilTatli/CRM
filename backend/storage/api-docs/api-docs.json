{
    "openapi": "3.0.0",
    "info": {
        "title": "Swagger with Laravel",
        "version": "1.0.0"
    },
    "paths": {
        "/api/": {},
        "/api/additional/appliances": {
            "get": {
                "tags": [
                    "Additional/Appliances"
                ],
                "summary": "Get list of appliances",
                "description": "Returns list of appliances",
                "operationId": "cc14ba2fb19bb55916c3b6e09f4ee83d",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Appliance"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "Additional/Appliances"
                ],
                "summary": "Store a new appliance",
                "description": "Store a new appliance",
                "operationId": "63160543cb58f5be455f9d3d58cac84c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplianceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Appliance created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Appliance"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/api/additional/appliances/{appliance}": {
            "get": {
                "tags": [
                    "Additional/Appliances"
                ],
                "summary": "Get a specific appliance",
                "description": "Get a specific appliance by its ID",
                "operationId": "7e2482e1164dcce5a46a569cc5dbb9f1",
                "parameters": [
                    {
                        "name": "appliance",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Appliance"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Additional/Appliances"
                ],
                "summary": "Update an existing appliance",
                "description": "Update an existing appliance by its ID",
                "operationId": "dee680b87acdb78ad8412f1004961fe8",
                "parameters": [
                    {
                        "name": "appliance",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplianceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Appliance updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Appliance"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Additional/Appliances"
                ],
                "summary": "Delete an appliance",
                "description": "Delete an appliance by its ID",
                "operationId": "5fe1b9a965816066b43872a445072081",
                "parameters": [
                    {
                        "name": "appliance",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Appliance deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/additional/areas": {
            "get": {
                "tags": [
                    "Additional/Areas"
                ],
                "summary": "Get list of areas",
                "description": "Returns list of areas",
                "operationId": "getAreas",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Area"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Additional/Areas"
                ],
                "summary": "Store a newly created area",
                "description": "Stores a new area in the database",
                "operationId": "storeArea",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AreaRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Area created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Area"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/additional/areas/{area}": {
            "get": {
                "tags": [
                    "Additional/Areas"
                ],
                "summary": "Get a specific area",
                "description": "Returns a specific area by ID",
                "operationId": "showArea",
                "parameters": [
                    {
                        "name": "area",
                        "in": "path",
                        "description": "ID of the area",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Area"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Area not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Additional/Areas"
                ],
                "summary": "Update an existing area",
                "description": "Updates an area in the database",
                "operationId": "updateArea",
                "parameters": [
                    {
                        "name": "area",
                        "in": "path",
                        "description": "ID of the area",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AreaRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Area updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Area"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Area not found"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Additional/Areas"
                ],
                "summary": "Delete an area",
                "description": "Deletes an area from the database",
                "operationId": "destroyArea",
                "parameters": [
                    {
                        "name": "area",
                        "in": "path",
                        "description": "ID of the area",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Area deleted successfully"
                    },
                    "404": {
                        "description": "Area not found"
                    }
                }
            }
        },
        "/api/additional/distributors": {
            "get": {
                "tags": [
                    "Additional/Distributors"
                ],
                "summary": "Get list of distributors",
                "description": "Returns list of distributors",
                "operationId": "41396159f0a028910433f6cd24905ed7",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Distributor"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "Additional/Distributors"
                ],
                "summary": "Store a new distributor",
                "description": "Store a new distributor",
                "operationId": "0110f85474a20b4385a02e708fda0e28",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DistributorRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Appliance created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Distributor"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/api/additional/distributors/{distributor}": {
            "get": {
                "tags": [
                    "Additional/Distributors"
                ],
                "summary": "Get a specific distributor",
                "description": "Get a specific distributor by its ID",
                "operationId": "2a76961c3f06aa0ea5232ddd13b03b81",
                "parameters": [
                    {
                        "name": "distributor",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Distributor"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Additional/Distributors"
                ],
                "summary": "Update an existing distributor",
                "description": "Update an existing distributor by its ID",
                "operationId": "f51cd2f02916e844f1f085163512718c",
                "parameters": [
                    {
                        "name": "distributor",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DistributorRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Distributor updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Distributor"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Additional/Distributors"
                ],
                "summary": "Delete an distributor",
                "description": "Delete an distributor by its ID",
                "operationId": "b8fb440c22aa65e3dfb18b09edab00a6",
                "parameters": [
                    {
                        "name": "distributor",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Distributor deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/additional/insurances": {
            "get": {
                "tags": [
                    "Additional/Insurances"
                ],
                "summary": "Get list of insurances",
                "description": "Returns list of insurances",
                "operationId": "ed6f25c8814b0f930fa8f9ab2ad7097d",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Insurance"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "post": {
                "tags": [
                    "Additional/Insurances"
                ],
                "summary": "Store a new insurance",
                "description": "Store a new insurance",
                "operationId": "6ed68bf560d5a271011fa6d93f08a8a7",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InsuranceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Insurance created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Insurance"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "409": {
                        "description": "Conflict"
                    }
                }
            }
        },
        "/api/additional/insurances/{insurance}": {
            "get": {
                "tags": [
                    "Additional/Insurances"
                ],
                "summary": "Get a specific insurance",
                "description": "Get a specific insurance by its ID",
                "operationId": "c88b6b2d7aab7357f5d48623e88988b5",
                "parameters": [
                    {
                        "name": "insurance",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Insurance"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Additional/Insurances"
                ],
                "summary": "Update an existing insurance",
                "description": "Update an existing insurance by its ID",
                "operationId": "b3474046d0cc33c41eff380a9b7fe3fc",
                "parameters": [
                    {
                        "name": "insurance",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InsuranceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Insurance updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Insurance"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Additional/Insurances"
                ],
                "summary": "Delete an insurance",
                "description": "Delete an insurance by its ID",
                "operationId": "bcf1b0da08b5f0ec526ee0e7c869f583",
                "parameters": [
                    {
                        "name": "insurance",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Insurance deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/additional/schedules": {
            "get": {
                "tags": [
                    "Additional/Schedules"
                ],
                "summary": "Get list of schedules",
                "description": "Returns list of schedules with technicians",
                "operationId": "getSchedules",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TechnicianResourceAdditional"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Additional/Schedules"
                ],
                "summary": "Store a new schedule",
                "description": "Creates a new schedule for specified technicians",
                "operationId": "storeSchedule",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScheduleStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/additional/schedules/{schedule}": {
            "get": {
                "tags": [
                    "Additional/Schedules"
                ],
                "summary": "Get a schedule by ID",
                "description": "Returns a schedule with its associated technicians",
                "operationId": "getScheduleById",
                "parameters": [
                    {
                        "name": "schedule",
                        "in": "path",
                        "description": "ID of the schedule",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ScheduleResourceAdditional"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Additional/Schedules"
                ],
                "summary": "Update a schedule",
                "description": "Updates an existing schedule and its technicians",
                "operationId": "updateSchedule",
                "parameters": [
                    {
                        "name": "schedule",
                        "in": "path",
                        "description": "ID of the schedule",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScheduleUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Additional/Schedules"
                ],
                "summary": "Delete a schedule",
                "description": "Deletes a schedule by ID",
                "operationId": "deleteSchedule",
                "parameters": [
                    {
                        "name": "schedule",
                        "in": "path",
                        "description": "ID of the schedule",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/additional/users": {
            "get": {
                "tags": [
                    "Additional/Users"
                ],
                "summary": "Get list of users",
                "description": "Returns list of users",
                "operationId": "getUsers",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserResourceCommon"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Additional/Users"
                ],
                "summary": "Create a new user",
                "description": "Creates a new user and returns the created user",
                "operationId": "storeUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResourceCommon"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/additional/users/{user}": {
            "get": {
                "tags": [
                    "Additional/Users"
                ],
                "summary": "Get a user by ID",
                "description": "Returns a single user",
                "operationId": "getUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResourceCommon"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Additional/Users"
                ],
                "summary": "Update a user",
                "description": "Updates the specified user",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResourceCommon"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Additional/Users"
                ],
                "summary": "Delete a user",
                "description": "Deletes the specified user",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User deleted successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User login",
                "description": "Authenticate user and return a JWT token",
                "operationId": "login",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "access_token": {
                                            "type": "string"
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/UserResourceCommon"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "User logout",
                "description": "Invalidate user token",
                "operationId": "logout",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/billing/payments": {
            "post": {
                "tags": [
                    "Received Payments"
                ],
                "summary": "Store a newly created received payment",
                "operationId": "storeReceivedPayment",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReceivedPaymentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment added successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Payment added successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to store payment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to store payment."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/billing/payments/{payment}": {
            "put": {
                "tags": [
                    "Received Payments"
                ],
                "summary": "Update an existing received payment",
                "operationId": "updateReceivedPayment",
                "parameters": [
                    {
                        "name": "payment",
                        "in": "path",
                        "description": "ID of the received payment",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReceivedPaymentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Payment updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update payment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to update payment."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Received Payments"
                ],
                "summary": "Delete an existing received payment",
                "operationId": "deleteReceivedPayment",
                "parameters": [
                    {
                        "name": "payment",
                        "in": "path",
                        "description": "ID of the received payment",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment deleted successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Payment deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to delete payment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to delete payment."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/billing/tasks/{task}/technicians": {
            "get": {
                "tags": [
                    "TechnicianPay"
                ],
                "summary": "Get payments for technicians assigned to a task",
                "description": "Retrieve a list of payments for technicians associated with a specific task.",
                "operationId": "getTechnicianPayments",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TechnicianPayResource"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Task not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/billing/tasks/{task}/technicians/{user}": {
            "patch": {
                "tags": [
                    "TechnicianPay"
                ],
                "summary": "Update a technician's payment information for a specific task",
                "description": "Update the payment details for a technician assigned to a task.",
                "operationId": "updateTechnicianPayment",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "description": "ID of the technician (user)",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TechnicianPayRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Technician payment updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Technician not assigned to this task",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Technician not assigned to this task."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update technician payment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to update technician payment."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/tasks": {
            "get": {
                "tags": [
                    "Common/Tasks"
                ],
                "summary": "Get a list of tasks",
                "description": "Retrieve a list of tasks, optionally filtered by status and paginated.",
                "operationId": "39f21f05e9be3bfad3d0a76c5744cab5",
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Comma-separated list of status IDs to filter tasks by",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "Number of tasks per page for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page number for pagination",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of tasks retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "current_page": {
                                            "type": "integer"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Task"
                                            }
                                        },
                                        "first_page_url": {
                                            "type": "string"
                                        },
                                        "from": {
                                            "type": "integer"
                                        },
                                        "last_page": {
                                            "type": "integer"
                                        },
                                        "last_page_url": {
                                            "type": "string"
                                        },
                                        "next_page_url": {
                                            "type": "string"
                                        },
                                        "path": {
                                            "type": "string"
                                        },
                                        "per_page": {
                                            "type": "integer"
                                        },
                                        "prev_page_url": {
                                            "type": "string"
                                        },
                                        "to": {
                                            "type": "integer"
                                        },
                                        "total": {
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/tasks/{id}": {
            "get": {
                "tags": [
                    "Common/Tasks"
                ],
                "summary": "Get a specific task by ID",
                "description": "Retrieve a specific task by its ID.",
                "operationId": "683b0b8d11af3e76ad1b0733c71fc823",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/tasks/{task}": {
            "put": {
                "tags": [
                    "Common/Tasks"
                ],
                "summary": "Update a specific task",
                "description": "Update the status of a specific task.",
                "operationId": "d4f6173d6c11f1f57fb3d2a4b2d5f790",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "status_id"
                                ],
                                "properties": {
                                    "status_id": {
                                        "description": "ID of the new status",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task updated successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/dispatch/technicians": {
            "get": {
                "tags": [
                    "Task-Technicians"
                ],
                "summary": "Get list of technicians",
                "description": "Fetches a list of technicians.",
                "operationId": "70779e8183c32f89a766dca081a5e5af",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TechnicianResourceDispatch"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to fetch technicians."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/dispatch/task-technicians": {
            "post": {
                "tags": [
                    "Task-Technicians"
                ],
                "summary": "Assign task to technician",
                "description": "Assign a task to a technician.",
                "operationId": "9d1338235a4b08328e57142a0b28a4ca",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskTechnicianStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task assigned to technician successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to assign task to technician."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/dispatch/task-technicians/{id}": {
            "get": {
                "tags": [
                    "Task-Technicians"
                ],
                "summary": "Get technician details",
                "description": "Fetches details of a specific technician.",
                "operationId": "c6ebc8ec52df530af820ba4e5bfbb3eb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TechnicianResourceDispatch"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "The specified user is not a technician."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to fetch technician."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Task-Technicians"
                ],
                "summary": "Update task technician assignment",
                "description": "Updates a task technician assignment.",
                "operationId": "f3214705bba16fc5ee5ddfd6717b71fd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskTechnicianUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task technician assignment updated successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Task technician assignment not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to update task technician assignment."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Task-Technicians"
                ],
                "summary": "Delete task technician assignment",
                "description": "Deletes a task technician assignment.",
                "operationId": "65931e7e6b5117d6846020144e36a241",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Task technician assignment deleted successfully."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Task technician assignment not found."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to delete task technician assignment."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/manager/tasks/{task}/status-history": {
            "get": {
                "tags": [
                    "Task Status History"
                ],
                "summary": "Get status history of a task",
                "operationId": "5912ae96b3a263000909b07f0a7f9908",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of status history",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/StatusChangeResourceManager"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/parts": {
            "post": {
                "tags": [
                    "Part"
                ],
                "summary": "Store a newly created part",
                "operationId": "f1730ccc6cc559a32452c97a747d4bbf",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "part_number": {
                                        "type": "string",
                                        "example": "PN123"
                                    },
                                    "task_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "appliance_id": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "distributor_id": {
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "status_id": {
                                        "type": "integer",
                                        "example": 4
                                    },
                                    "qnt": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "dealer_price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 100
                                    },
                                    "retail_price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 150
                                    },
                                    "distributor_name": {
                                        "type": "string",
                                        "example": "Distributor Inc."
                                    },
                                    "part_description": {
                                        "type": "string",
                                        "example": "A high-quality part for repair."
                                    },
                                    "distributor_invoice": {
                                        "type": "string",
                                        "example": "INV-123456"
                                    },
                                    "eta": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-08-01"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Part created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PartResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to store part",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to store part."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/parts/{part}": {
            "put": {
                "tags": [
                    "Part"
                ],
                "summary": "Update the specified part",
                "operationId": "06c954a371adcc3c9022a6ab725b2a41",
                "parameters": [
                    {
                        "name": "part",
                        "in": "path",
                        "description": "ID of the part to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "part_number": {
                                        "type": "string",
                                        "example": "PN123"
                                    },
                                    "task_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "appliance_id": {
                                        "type": "integer",
                                        "example": 2
                                    },
                                    "distributor_id": {
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "status_id": {
                                        "type": "integer",
                                        "example": 4
                                    },
                                    "qnt": {
                                        "type": "integer",
                                        "example": 5
                                    },
                                    "dealer_price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 100
                                    },
                                    "retail_price": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 150
                                    },
                                    "distributor_name": {
                                        "type": "string",
                                        "example": "Distributor Inc."
                                    },
                                    "part_description": {
                                        "type": "string",
                                        "example": "A high-quality part for repair."
                                    },
                                    "distributor_invoice": {
                                        "type": "string",
                                        "example": "INV-123456"
                                    },
                                    "eta": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2024-08-01"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Part updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PartResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to update part",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to update part."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Part"
                ],
                "summary": "Remove the specified part",
                "operationId": "f60df46d6107d6b726a398d84c90f84f",
                "parameters": [
                    {
                        "name": "part",
                        "in": "path",
                        "description": "ID of the part to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Part deleted successfully"
                    },
                    "500": {
                        "description": "Failed to delete part",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Failed to delete part."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/task/tasks/{task}/appliances": {
            "post": {
                "tags": [
                    "Task/ApplianceList"
                ],
                "summary": "Store a newly created appliance list",
                "operationId": "376349ca2d26c40fcf8d324dbab9f054",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task to which the appliance list belongs",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplianceListRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Appliance list created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplianceListResourceCommon"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/task/tasks/{task}/appliances/{appliance}": {
            "put": {
                "tags": [
                    "Task/ApplianceList"
                ],
                "summary": "Update the specified appliance list",
                "operationId": "f048cbed78fe5c4cb541ae96e363e245",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task to which the appliance list belongs",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "applianceList",
                        "in": "path",
                        "description": "ID of the appliance list to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApplianceListRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Appliance list updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApplianceListResourceCommon"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden, appliance list does not belong to the specified task"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Task/ApplianceList"
                ],
                "summary": "Remove the specified appliance list",
                "operationId": "9e2594c34d8cb4e082775e7a68afe92a",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task to which the appliance list belongs",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "applianceList",
                        "in": "path",
                        "description": "ID of the appliance list to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Appliance list deleted successfully"
                    },
                    "403": {
                        "description": "Forbidden, appliance list does not belong to the specified task"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/task/tasks/{task}/customer_phones": {
            "post": {
                "tags": [
                    "Task/CustomerPhone"
                ],
                "summary": "Create a new customer phone record",
                "operationId": "dbf8d41bdbe043a16cea5e4903a0822d",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "phone_number": {
                                        "type": "string",
                                        "example": "123-456-7890"
                                    },
                                    "note": {
                                        "type": "string",
                                        "example": "Customer's main contact number"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Customer phone created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerPhoneResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/task/tasks/{task}/customer_phones/{customerPhone}": {
            "put": {
                "tags": [
                    "Task/CustomerPhone"
                ],
                "summary": "Update an existing customer phone record",
                "operationId": "5144b84b6a8c11de47971043073f8d1c",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "customerPhone",
                        "in": "path",
                        "description": "ID of the customer phone",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "phone_number": {
                                        "type": "string",
                                        "example": "123-456-7890"
                                    },
                                    "note": {
                                        "type": "string",
                                        "example": "Updated note"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Customer phone updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerPhoneResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Task/CustomerPhone"
                ],
                "summary": "Delete a customer phone record",
                "operationId": "04ebe52aeac252766e7001a150621e2a",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "customerPhone",
                        "in": "path",
                        "description": "ID of the customer phone",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer phone deleted successfully"
                    },
                    "403": {
                        "description": "Forbidden if customer phone does not belong to the task"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/task/tasks/{task}/files": {
            "post": {
                "tags": [
                    "Task/Files"
                ],
                "summary": "Upload a new file for a task",
                "description": "Upload a new file and associate it with a task.",
                "operationId": "afeef85b10333b12b9231e8539cf96a2",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "File uploaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/task/tasks/{task}/files/{file}": {
            "get": {
                "tags": [
                    "Task/Files"
                ],
                "summary": "Get a specific file associated with a task",
                "description": "Retrieve a specific file associated with a task.",
                "operationId": "d9b49e2e2f35fa0b1015edca20bc3083",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "file",
                        "in": "path",
                        "description": "ID of the file",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileResource"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Task/Files"
                ],
                "summary": "Update a file associated with a task",
                "description": "Update the details of a specific file associated with a task.",
                "operationId": "adae21a0b725eb802750de38d85d75d7",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "file",
                        "in": "path",
                        "description": "ID of the file",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FileRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "File updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FileResource"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Task/Files"
                ],
                "summary": "Delete a file associated with a task",
                "description": "Remove a specific file associated with a task.",
                "operationId": "e8c8f83b4f9c1b864132093be9cb08ee",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "file",
                        "in": "path",
                        "description": "ID of the file",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File deleted successfully"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/task/tasks/{task}/notes": {
            "post": {
                "tags": [
                    "Task/Notes"
                ],
                "summary": "Create a new note",
                "operationId": "e51b251ff33e10f48c0bde2601c61e0a",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NoteRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Note created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoteResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error creating note",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/task/tasks/{task}/notes/{note}": {
            "put": {
                "tags": [
                    "Task/Notes"
                ],
                "summary": "Update a note",
                "operationId": "ba65a2fd8ebf44ee34308558c1dac665",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "note",
                        "in": "path",
                        "description": "ID of the note",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NoteRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Note updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoteResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error updating note",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Task/Notes"
                ],
                "summary": "Delete a note",
                "operationId": "cc2572f3bd52c6d247da39cd4ba1f5d9",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "note",
                        "in": "path",
                        "description": "ID of the note",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Note deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden if note does not belong to the task",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error deleting note",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        },
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/task/tasks": {
            "post": {
                "tags": [
                    "Task/Task"
                ],
                "summary": "Create a new task",
                "operationId": "ef21769984406ca22f7afdcddb57bc64",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskStoreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Task created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Status not found"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to create task"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/task/tasks/{task}": {
            "get": {
                "tags": [
                    "Task/Task"
                ],
                "summary": "Get a specific task",
                "operationId": "ed1a158b66e4869a1b414eaa5115a059",
                "parameters": [
                    {
                        "name": "task",
                        "in": "path",
                        "description": "ID of the task",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Error fetching task"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ApplianceRequest": {
                "title": "ApplianceRequest",
                "description": "Request payload for creating or updating an appliance",
                "required": [
                    "title"
                ],
                "properties": {
                    "title": {
                        "description": "Title of the appliance",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AreaRequest": {
                "title": "AreaRequest",
                "description": "Request payload for creating or updating an area",
                "required": [
                    "title"
                ],
                "properties": {
                    "title": {
                        "description": "Title of the area",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DistributorRequest": {
                "required": [
                    "title"
                ],
                "properties": {
                    "title": {
                        "description": "Distributor's name",
                        "type": "string",
                        "example": "ACME Supplies"
                    }
                },
                "type": "object"
            },
            "InsuranceRequest": {
                "required": [
                    "title"
                ],
                "properties": {
                    "title": {
                        "description": "Insurance's name",
                        "type": "string",
                        "example": "ACME Supplies"
                    }
                },
                "type": "object"
            },
            "ScheduleRequest": {
                "required": [
                    "date",
                    "start_time",
                    "end_time"
                ],
                "properties": {
                    "date": {
                        "description": "Date of the schedule",
                        "type": "string",
                        "format": "date",
                        "example": "2024-08-01"
                    },
                    "start_time": {
                        "description": "Start time of the schedule in HH:mm format",
                        "type": "string",
                        "format": "time",
                        "example": "09:00"
                    },
                    "end_time": {
                        "description": "End time of the schedule in HH:mm format",
                        "type": "string",
                        "format": "time",
                        "example": "17:00"
                    }
                },
                "type": "object"
            },
            "ScheduleStoreRequest": {
                "required": [
                    "start_date",
                    "end_date",
                    "start_time",
                    "end_time",
                    "technicians",
                    "area_id"
                ],
                "properties": {
                    "start_date": {
                        "description": "Start date of the schedule",
                        "type": "string",
                        "format": "date",
                        "example": "2024-08-01"
                    },
                    "end_date": {
                        "description": "End date of the schedule",
                        "type": "string",
                        "format": "date",
                        "example": "2024-08-01"
                    },
                    "start_time": {
                        "description": "Start time of the schedule in HH:mm format",
                        "type": "string",
                        "format": "time",
                        "example": "09:00"
                    },
                    "end_time": {
                        "description": "End time of the schedule in HH:mm format",
                        "type": "string",
                        "format": "time",
                        "example": "17:00"
                    },
                    "technicians": {
                        "description": "Array of technician IDs",
                        "type": "array",
                        "items": {
                            "description": "ID of the technician",
                            "type": "integer",
                            "example": 1
                        }
                    },
                    "area_id": {
                        "description": "ID of the area",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "ScheduleUpdateRequest": {
                "required": [
                    "date",
                    "start_time",
                    "end_time",
                    "technicians",
                    "area_id"
                ],
                "properties": {
                    "date": {
                        "description": "Date of the schedule",
                        "type": "string",
                        "format": "date",
                        "example": "2024-08-01"
                    },
                    "start_time": {
                        "description": "Start time of the schedule in HH:mm format",
                        "type": "string",
                        "format": "time",
                        "example": "09:00"
                    },
                    "end_time": {
                        "description": "End time of the schedule in HH:mm format",
                        "type": "string",
                        "format": "time",
                        "example": "17:00"
                    },
                    "technicians": {
                        "description": "Array of technician IDs",
                        "type": "array",
                        "items": {
                            "description": "ID of the technician",
                            "type": "integer",
                            "example": 1
                        }
                    },
                    "area_id": {
                        "description": "ID of the area",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "UserStoreRequest": {
                "title": "UserStoreRequest",
                "description": "Request body for creating a new user",
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the user",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "description": "Email address of the user",
                        "type": "string",
                        "format": "email",
                        "example": "johndoe@example.com"
                    },
                    "password": {
                        "description": "Password for the user account",
                        "type": "string",
                        "format": "password",
                        "example": "strongpassword123"
                    }
                },
                "type": "object"
            },
            "UserUpdateRequest": {
                "title": "UserUpdateRequest",
                "description": "Request body for updating an existing user",
                "required": [
                    "name",
                    "email"
                ],
                "properties": {
                    "name": {
                        "description": "Updated name of the user",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "description": "Updated email address of the user",
                        "type": "string",
                        "format": "email",
                        "example": "johndoe@example.com"
                    },
                    "password": {
                        "description": "Updated password for the user account (optional)",
                        "type": "string",
                        "format": "password",
                        "example": "newstrongpassword123"
                    }
                },
                "type": "object"
            },
            "LoginRequest": {
                "title": "Login Request",
                "description": "Request data for logging in",
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "description": "The email address of the user",
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    },
                    "password": {
                        "description": "The password of the user",
                        "type": "string",
                        "format": "password",
                        "example": "password123"
                    }
                },
                "type": "object"
            },
            "ReceivedPaymentRequest": {
                "title": "ReceivedPaymentRequest",
                "description": "Request payload for creating or updating a received payment.",
                "required": [
                    "task_id",
                    "payment",
                    "payment_status",
                    "date_received"
                ],
                "properties": {
                    "task_id": {
                        "description": "ID of the task related to this payment.",
                        "type": "integer",
                        "example": 1
                    },
                    "payment": {
                        "description": "Amount of the payment.",
                        "type": "number",
                        "format": "float",
                        "example": 100.5
                    },
                    "payment_status": {
                        "description": "Status of the payment.",
                        "type": "string",
                        "enum": [
                            "check",
                            "cash",
                            "credit card",
                            "eft",
                            "warranty",
                            "other"
                        ],
                        "example": "cash"
                    },
                    "pay_doc": {
                        "description": "Document number related to the payment.",
                        "type": "string",
                        "example": "12345",
                        "nullable": true
                    },
                    "date_received": {
                        "description": "Date when the payment was received.",
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-28"
                    },
                    "notes": {
                        "description": "Additional notes about the payment.",
                        "type": "string",
                        "example": "Payment received in full.",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "TechnicianPayRequest": {
                "required": [
                    "payment_status"
                ],
                "properties": {
                    "payment_amount": {
                        "description": "Amount paid to the technician",
                        "type": "number",
                        "format": "float",
                        "example": 150.5
                    },
                    "paid_at": {
                        "description": "Date and time when payment was made",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-28T14:00:00Z"
                    },
                    "payment_status": {
                        "description": "Status of the payment",
                        "type": "string",
                        "enum": [
                            "paid",
                            "not paid"
                        ],
                        "example": "paid"
                    }
                },
                "type": "object"
            },
            "TaskTechnicianStoreRequest": {
                "title": "Task Technician Store Request",
                "description": "Request for assigning a technician to a task",
                "required": [
                    "task_id",
                    "user_id",
                    "date",
                    "start_time",
                    "end_time"
                ],
                "properties": {
                    "task_id": {
                        "description": "ID of the task",
                        "type": "integer"
                    },
                    "user_id": {
                        "description": "ID of the technician (user)",
                        "type": "integer"
                    },
                    "date": {
                        "description": "Date of the assignment",
                        "type": "string",
                        "format": "date"
                    },
                    "start_time": {
                        "description": "Start time of the assignment",
                        "type": "string",
                        "format": "time"
                    },
                    "end_time": {
                        "description": "End time of the assignment",
                        "type": "string",
                        "format": "time"
                    },
                    "payment_amount": {
                        "description": "Payment amount for the technician",
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "paid_at": {
                        "description": "Payment date",
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "payment_status": {
                        "description": "Payment status",
                        "type": "string",
                        "enum": [
                            "paid",
                            "not paid"
                        ],
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "TaskTechnicianUpdateRequest": {
                "title": "Task Technician Update Request",
                "description": "Request for updating a technician's assignment details for a task",
                "required": [
                    "date",
                    "start_time",
                    "end_time"
                ],
                "properties": {
                    "date": {
                        "description": "Date of the assignment",
                        "type": "string",
                        "format": "date"
                    },
                    "start_time": {
                        "description": "Start time of the assignment",
                        "type": "string",
                        "format": "time"
                    },
                    "end_time": {
                        "description": "End time of the assignment",
                        "type": "string",
                        "format": "time"
                    },
                    "payment_amount": {
                        "description": "Payment amount for the technician",
                        "type": "number",
                        "format": "float",
                        "nullable": true
                    },
                    "paid_at": {
                        "description": "Payment date",
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "payment_status": {
                        "description": "Payment status",
                        "type": "string",
                        "enum": [
                            "paid",
                            "not paid"
                        ],
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "PartRequest": {
                "required": [
                    "part_number",
                    "task_id",
                    "appliance_id",
                    "distributor_id",
                    "status_id",
                    "qnt",
                    "dealer_price",
                    "retail_price"
                ],
                "properties": {
                    "part_number": {
                        "description": "The part number.",
                        "type": "string",
                        "maxLength": 255
                    },
                    "task_id": {
                        "description": "The ID of the associated task.",
                        "type": "integer",
                        "example": 1
                    },
                    "appliance_id": {
                        "description": "The ID of the associated appliance.",
                        "type": "integer",
                        "example": 1
                    },
                    "distributor_id": {
                        "description": "The ID of the distributor.",
                        "type": "integer",
                        "example": 1
                    },
                    "status_id": {
                        "description": "The ID of the part status.",
                        "type": "integer",
                        "example": 1
                    },
                    "qnt": {
                        "description": "The quantity of parts.",
                        "type": "integer",
                        "minimum": 1,
                        "example": 1
                    },
                    "dealer_price": {
                        "description": "The dealer price of the part.",
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "example": 100
                    },
                    "retail_price": {
                        "description": "The retail price of the part.",
                        "type": "number",
                        "format": "float",
                        "minimum": 0,
                        "example": 150
                    },
                    "distributor_name": {
                        "description": "The name of the distributor (optional).",
                        "type": "string",
                        "maxLength": 255,
                        "nullable": true
                    },
                    "part_description": {
                        "description": "A description of the part (optional).",
                        "type": "string",
                        "nullable": true
                    },
                    "distributor_invoice": {
                        "description": "The distributor's invoice number (optional).",
                        "type": "string",
                        "nullable": true
                    },
                    "eta": {
                        "description": "The estimated time of arrival (optional).",
                        "type": "string",
                        "format": "date",
                        "example": "2024-08-01",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "ApplianceListRequest": {
                "required": [
                    "serial_number",
                    "model_number",
                    "brand",
                    "appliance_id"
                ],
                "properties": {
                    "serial_number": {
                        "description": "Serial number of the appliance",
                        "type": "string",
                        "example": "SN123456"
                    },
                    "model_number": {
                        "description": "Model number of the appliance",
                        "type": "string",
                        "example": "MODEL-XYZ"
                    },
                    "brand": {
                        "description": "Brand of the appliance",
                        "type": "string",
                        "example": "BrandName"
                    },
                    "dop": {
                        "description": "Date of purchase or installation",
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-01"
                    },
                    "appl_note": {
                        "description": "Additional notes about the appliance",
                        "type": "string",
                        "example": "This appliance needs regular maintenance."
                    },
                    "appliance_id": {
                        "description": "ID of the appliance",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "CustomerPhoneRequest": {
                "title": "Customer Phone Request",
                "description": "Request schema for creating or updating a customer phone record",
                "required": [
                    "phone_number"
                ],
                "properties": {
                    "phone_number": {
                        "description": "The phone number of the customer",
                        "type": "string",
                        "example": "+1234567890"
                    },
                    "note": {
                        "description": "Optional note about the phone number",
                        "type": "string",
                        "example": "Preferred contact number"
                    }
                },
                "type": "object"
            },
            "FileRequest": {
                "required": [
                    "file"
                ],
                "properties": {
                    "file": {
                        "description": "The file to be uploaded",
                        "type": "string",
                        "format": "binary",
                        "example": "file.pdf"
                    },
                    "file_note": {
                        "description": "Optional note or description for the file",
                        "type": "string",
                        "maxLength": 255,
                        "example": "This is a sample file note."
                    }
                },
                "type": "object"
            },
            "NoteRequest": {
                "required": [
                    "text"
                ],
                "properties": {
                    "text": {
                        "type": "string",
                        "example": "This is a note text"
                    }
                },
                "type": "object"
            },
            "TaskStoreRequest": {
                "title": "Create Task Request",
                "description": "Request schema for creating a new task",
                "required": [
                    "work_order",
                    "customer_name",
                    "street",
                    "city",
                    "zip",
                    "insurance_id"
                ],
                "properties": {
                    "work_order": {
                        "description": "Work order number",
                        "type": "string",
                        "example": "WO123456"
                    },
                    "customer_name": {
                        "description": "Name of the customer",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "street": {
                        "description": "Street address",
                        "type": "string",
                        "example": "123 Elm Street"
                    },
                    "city": {
                        "description": "City",
                        "type": "string",
                        "example": "Springfield"
                    },
                    "zip": {
                        "description": "Zip code",
                        "type": "string",
                        "example": "12345"
                    },
                    "authorization": {
                        "description": "Authorization details (optional)",
                        "type": "string",
                        "example": "Authorization for work"
                    },
                    "insurance_id": {
                        "description": "ID of the associated insurance",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "ScheduleResourceAdditional": {
                "properties": {
                    "id": {
                        "description": "ID of the schedule",
                        "type": "integer"
                    },
                    "date": {
                        "description": "Date of the schedule",
                        "type": "string",
                        "format": "date"
                    },
                    "start_time": {
                        "description": "Start time of the schedule",
                        "type": "string",
                        "format": "time"
                    },
                    "end_time": {
                        "description": "End time of the schedule",
                        "type": "string",
                        "format": "time"
                    },
                    "created_at": {
                        "description": "Creation timestamp",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Update timestamp",
                        "type": "string",
                        "format": "date-time"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "ID of the user",
                                    "type": "integer"
                                },
                                "name": {
                                    "description": "Name of the user",
                                    "type": "string"
                                },
                                "email": {
                                    "description": "Email of the user",
                                    "type": "string"
                                },
                                "phone_number": {
                                    "description": "Phone number of the user",
                                    "type": "string"
                                },
                                "areas": {
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "description": "ID of the area",
                                                "type": "integer"
                                            },
                                            "title": {
                                                "description": "Title of the area",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "TechnicianResourceAdditional": {
                "description": "Technician resource with schedules and areas",
                "properties": {
                    "id": {
                        "description": "ID of the technician",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the technician",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email of the technician",
                        "type": "string"
                    },
                    "phone_number": {
                        "description": "Phone number of the technician",
                        "type": "string"
                    },
                    "schedules": {
                        "description": "List of schedules associated with the technician",
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "ID of the schedule",
                                    "type": "integer"
                                },
                                "date": {
                                    "description": "Date of the schedule",
                                    "type": "string",
                                    "format": "date"
                                },
                                "start_time": {
                                    "description": "Start time of the schedule",
                                    "type": "string",
                                    "format": "time"
                                },
                                "end_time": {
                                    "description": "End time of the schedule",
                                    "type": "string",
                                    "format": "time"
                                },
                                "areas": {
                                    "description": "List of areas covered in the schedule",
                                    "type": "array",
                                    "items": {
                                        "properties": {
                                            "id": {
                                                "description": "ID of the area",
                                                "type": "integer"
                                            },
                                            "title": {
                                                "description": "Title of the area",
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "ReceivedPaymentResource": {
                "title": "ReceivedPaymentResource",
                "description": "Resource representation of a received payment.",
                "required": [
                    "id",
                    "task_id",
                    "payment",
                    "payment_status",
                    "date_received"
                ],
                "properties": {
                    "id": {
                        "description": "ID of the received payment.",
                        "type": "integer",
                        "example": 1
                    },
                    "task_id": {
                        "description": "ID of the related task.",
                        "type": "integer",
                        "example": 1
                    },
                    "payment": {
                        "description": "Amount of the payment.",
                        "type": "number",
                        "format": "float",
                        "example": 150.75
                    },
                    "payment_status": {
                        "description": "Status of the payment.",
                        "type": "string",
                        "enum": [
                            "check",
                            "cash",
                            "credit card",
                            "eft",
                            "warranty",
                            "other"
                        ],
                        "example": "cash"
                    },
                    "pay_doc": {
                        "description": "Document number related to the payment.",
                        "type": "string",
                        "example": "INV-12345",
                        "nullable": true
                    },
                    "date_received": {
                        "description": "Date when the payment was received.",
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-28"
                    },
                    "user": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/UserResourceCommon"
                            }
                        ],
                        "nullable": true,
                        "description": "User who recorded the payment."
                    },
                    "notes": {
                        "description": "Additional notes about the payment.",
                        "type": "string",
                        "example": "Paid in full.",
                        "nullable": true
                    },
                    "created_at": {
                        "description": "Timestamp when the record was created.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-28T15:30:00Z"
                    },
                    "updated_at": {
                        "description": "Timestamp when the record was last updated.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-29T12:00:00Z"
                    }
                },
                "type": "object"
            },
            "TechnicianPayResource": {
                "description": "Technician payment details",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the payment record",
                        "type": "integer"
                    },
                    "user_id": {
                        "description": "Unique identifier of the technician",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the technician",
                        "type": "string"
                    },
                    "date": {
                        "description": "Date of the payment record",
                        "type": "string",
                        "format": "date"
                    },
                    "start_time": {
                        "description": "Start time of the work period",
                        "type": "string",
                        "format": "time"
                    },
                    "end_time": {
                        "description": "End time of the work period",
                        "type": "string",
                        "format": "time"
                    },
                    "payment_amount": {
                        "description": "Amount paid to the technician",
                        "type": "number",
                        "format": "float"
                    },
                    "paid_at": {
                        "description": "Date and time when payment was made",
                        "type": "string",
                        "format": "date-time"
                    },
                    "payment_status": {
                        "description": "Status of the payment",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ApplianceListResourceCommon": {
                "required": [
                    "id",
                    "serial_number",
                    "model_number",
                    "brand",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier for the appliance list entry",
                        "type": "integer",
                        "example": 1
                    },
                    "serial_number": {
                        "description": "Serial number of the appliance",
                        "type": "string",
                        "example": "SN123456"
                    },
                    "model_number": {
                        "description": "Model number of the appliance",
                        "type": "string",
                        "example": "ModelX1000"
                    },
                    "brand": {
                        "description": "Brand of the appliance",
                        "type": "string",
                        "example": "BrandName"
                    },
                    "dop": {
                        "description": "Date of purchase or other relevant date",
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-01"
                    },
                    "appl_note": {
                        "description": "Additional notes about the appliance",
                        "type": "string",
                        "example": "Recently serviced"
                    },
                    "appliance": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ApplianceResourceCommon"
                            }
                        ],
                        "nullable": true,
                        "description": "Detailed information about the appliance"
                    },
                    "created_at": {
                        "description": "Timestamp when the appliance list entry was created",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-01T12:34:56Z"
                    },
                    "updated_at": {
                        "description": "Timestamp when the appliance list entry was last updated",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-10T12:34:56Z"
                    }
                },
                "type": "object"
            },
            "ApplianceResourceCommon": {
                "required": [
                    "id",
                    "title",
                    "created_at",
                    "updated_at"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier for the appliance",
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "description": "Title or name of the appliance",
                        "type": "string",
                        "example": "Washing Machine"
                    },
                    "created_at": {
                        "description": "Timestamp when the appliance was created",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-01T12:34:56Z"
                    },
                    "updated_at": {
                        "description": "Timestamp when the appliance was last updated",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-10T12:34:56Z"
                    }
                },
                "type": "object"
            },
            "CustomerPhoneResource": {
                "title": "Customer Phone Resource",
                "description": "Resource schema for a customer phone record",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the customer phone record",
                        "type": "integer",
                        "example": 1
                    },
                    "phone_number": {
                        "description": "The phone number of the customer",
                        "type": "string",
                        "example": "+1234567890"
                    },
                    "note": {
                        "description": "Optional note about the phone number",
                        "type": "string",
                        "example": "Preferred contact number"
                    },
                    "created_at": {
                        "description": "Timestamp when the record was created",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-28T12:34:56Z"
                    },
                    "updated_at": {
                        "description": "Timestamp when the record was last updated",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-28T12:34:56Z"
                    }
                },
                "type": "object"
            },
            "FileResource": {
                "required": [
                    "id",
                    "file_path",
                    "file_name"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier for the file",
                        "type": "integer",
                        "example": 1
                    },
                    "file_path": {
                        "description": "Path where the file is stored",
                        "type": "string",
                        "example": "/uploads/files/example.pdf"
                    },
                    "file_name": {
                        "description": "Name of the file",
                        "type": "string",
                        "example": "example.pdf"
                    },
                    "file_note": {
                        "description": "Additional notes or description about the file",
                        "type": "string",
                        "example": "This file contains the signed agreement"
                    },
                    "created_at": {
                        "description": "Timestamp when the file record was created",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-25T15:00:00Z"
                    },
                    "updated_at": {
                        "description": "Timestamp when the file record was last updated",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-26T15:00:00Z"
                    }
                },
                "type": "object"
            },
            "InsuranceResourceCommon": {
                "title": "Insurance Resource",
                "description": "Resource schema for an insurance",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the insurance",
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "description": "Title or name of the insurance",
                        "type": "string",
                        "example": "Health Insurance"
                    },
                    "created_at": {
                        "description": "Creation timestamp of the insurance record",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-28T12:34:56Z"
                    },
                    "updated_at": {
                        "description": "Last update timestamp of the insurance record",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-28T12:34:56Z"
                    }
                },
                "type": "object"
            },
            "NoteResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "text": {
                        "type": "string",
                        "example": "This is a note text"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserResourceCommon"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-28T14:55:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-28T14:55:00Z"
                    }
                },
                "type": "object"
            },
            "TaskStatusResourceCommon": {
                "description": "Resource representing a task status",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the task status",
                        "type": "integer"
                    },
                    "title": {
                        "description": "Title of the task status",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the task status was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the task status was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "UserResourceCommon": {
                "title": "UserResource",
                "description": "User resource",
                "properties": {
                    "id": {
                        "description": "ID of the user",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the user",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email of the user",
                        "type": "string",
                        "format": "email"
                    },
                    "phone_number": {
                        "description": "Phone number of the user",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the user was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the user was last updated",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "ScheduleResourceDispatch": {
                "title": "Schedule Resource",
                "description": "Schedule details for a specific task",
                "properties": {
                    "id": {
                        "description": "ID of the schedule",
                        "type": "integer"
                    },
                    "date": {
                        "description": "Date of the schedule",
                        "type": "string",
                        "format": "date"
                    },
                    "start_time": {
                        "description": "Start time of the schedule",
                        "type": "string",
                        "format": "time"
                    },
                    "end_time": {
                        "description": "End time of the schedule",
                        "type": "string",
                        "format": "time"
                    },
                    "areas": {
                        "description": "List of areas associated with the schedule",
                        "type": "array",
                        "items": {
                            "properties": {
                                "id": {
                                    "description": "ID of the area",
                                    "type": "integer"
                                },
                                "title": {
                                    "description": "Title of the area",
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "TaskTechnicianResourceDispatch": {
                "title": "Task Technician Resource",
                "description": "Details of a task assigned to a technician",
                "properties": {
                    "id": {
                        "description": "ID of the task",
                        "type": "integer"
                    },
                    "work_order": {
                        "description": "Work order number of the task",
                        "type": "string"
                    },
                    "customer_name": {
                        "description": "Name of the customer",
                        "type": "string"
                    },
                    "street": {
                        "description": "Street address of the task",
                        "type": "string"
                    },
                    "city": {
                        "description": "City where the task is located",
                        "type": "string"
                    },
                    "zip": {
                        "description": "ZIP code of the task location",
                        "type": "string"
                    },
                    "authorization": {
                        "description": "Authorization details for the task",
                        "type": "string"
                    },
                    "insurance_id": {
                        "description": "ID of the associated insurance",
                        "type": "integer"
                    },
                    "status_id": {
                        "description": "ID of the task status",
                        "type": "integer"
                    },
                    "task_technician_id": {
                        "description": "ID of the task technician association",
                        "type": "integer"
                    },
                    "date": {
                        "description": "Date when the task is scheduled",
                        "type": "string",
                        "format": "date"
                    },
                    "start_time": {
                        "description": "Start time of the task",
                        "type": "string",
                        "format": "time"
                    },
                    "end_time": {
                        "description": "End time of the task",
                        "type": "string",
                        "format": "time"
                    },
                    "payment_amount": {
                        "description": "Amount of payment assigned to the technician",
                        "type": "number",
                        "format": "float"
                    },
                    "paid_at": {
                        "description": "Date when the payment was made",
                        "type": "string",
                        "format": "date"
                    },
                    "payment_status": {
                        "description": "Status of the payment",
                        "type": "string",
                        "enum": [
                            "paid",
                            "not paid"
                        ]
                    }
                },
                "type": "object"
            },
            "TechnicianResourceDispatch": {
                "title": "Technician Resource",
                "description": "Details of a technician",
                "properties": {
                    "id": {
                        "description": "ID of the technician",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the technician",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email address of the technician",
                        "type": "string",
                        "format": "email"
                    },
                    "phone_number": {
                        "description": "Phone number of the technician",
                        "type": "string"
                    },
                    "schedules": {
                        "description": "List of schedules assigned to the technician",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ScheduleResourceDispatch"
                        }
                    },
                    "tasks": {
                        "description": "List of tasks assigned to the technician",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskTechnicianResourceDispatch"
                        }
                    }
                },
                "type": "object"
            },
            "StatusChangeResourceManager": {
                "description": "Resource representing a status change",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the status change",
                        "type": "integer"
                    },
                    "task_id": {
                        "description": "Identifier of the associated task",
                        "type": "integer"
                    },
                    "status": {
                        "$ref": "#/components/schemas/TaskStatusResourceCommon"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserResourceCommon"
                    },
                    "created_at": {
                        "description": "Timestamp when the status change was recorded",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "PartResource": {
                "required": [
                    "id",
                    "part_number_id",
                    "task_id",
                    "appliance_id",
                    "distributor_id",
                    "user_id",
                    "status_id",
                    "qnt",
                    "dealer_price",
                    "retail_price"
                ],
                "properties": {
                    "id": {
                        "description": "The unique identifier for the part.",
                        "type": "integer",
                        "example": 1
                    },
                    "part_number_id": {
                        "description": "The ID of the part number.",
                        "type": "integer",
                        "example": 101
                    },
                    "task_id": {
                        "description": "The ID of the associated task.",
                        "type": "integer",
                        "example": 202
                    },
                    "appliance_id": {
                        "description": "The ID of the associated appliance.",
                        "type": "integer",
                        "example": 303
                    },
                    "distributor_id": {
                        "description": "The ID of the distributor.",
                        "type": "integer",
                        "example": 404
                    },
                    "user_id": {
                        "description": "The ID of the user associated with the part.",
                        "type": "integer",
                        "example": 505
                    },
                    "status_id": {
                        "description": "The ID of the part status.",
                        "type": "integer",
                        "example": 606
                    },
                    "qnt": {
                        "description": "The quantity of parts.",
                        "type": "integer",
                        "example": 10
                    },
                    "dealer_price": {
                        "description": "The dealer price of the part.",
                        "type": "number",
                        "format": "float",
                        "example": 100
                    },
                    "retail_price": {
                        "description": "The retail price of the part.",
                        "type": "number",
                        "format": "float",
                        "example": 150
                    },
                    "distributor_name": {
                        "description": "The name of the distributor.",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Distributor Inc."
                    },
                    "part_description": {
                        "description": "A description of the part.",
                        "type": "string",
                        "example": "A high-quality part for repair."
                    },
                    "distributor_invoice": {
                        "description": "The distributor's invoice number.",
                        "type": "string",
                        "example": "INV-123456"
                    },
                    "eta": {
                        "description": "The estimated time of arrival of the part.",
                        "type": "string",
                        "format": "date",
                        "example": "2024-08-01"
                    }
                },
                "type": "object"
            },
            "TaskResource": {
                "title": "Task Resource",
                "description": "Resource schema for a task",
                "properties": {
                    "id": {
                        "description": "Unique identifier of the task",
                        "type": "integer",
                        "example": 1
                    },
                    "work_order": {
                        "description": "Work order number",
                        "type": "string",
                        "example": "WO123456"
                    },
                    "customer_name": {
                        "description": "Name of the customer",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "street": {
                        "description": "Street address",
                        "type": "string",
                        "example": "123 Elm Street"
                    },
                    "city": {
                        "description": "City",
                        "type": "string",
                        "example": "Springfield"
                    },
                    "zip": {
                        "description": "Zip code",
                        "type": "string",
                        "example": "12345"
                    },
                    "authorization": {
                        "description": "Authorization details",
                        "type": "string",
                        "example": "Authorization for work"
                    },
                    "insurance": {
                        "$ref": "#/components/schemas/InsuranceResourceCommon"
                    },
                    "status": {
                        "$ref": "#/components/schemas/TaskStatusResourceCommon"
                    },
                    "created_at": {
                        "description": "Creation timestamp of the task",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-28T12:34:56Z"
                    },
                    "updated_at": {
                        "description": "Last update timestamp of the task",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-28T12:34:56Z"
                    },
                    "notes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/NoteResource"
                        }
                    },
                    "phones": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CustomerPhoneResource"
                        }
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FileResource"
                        }
                    },
                    "appliance_lists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApplianceListResourceCommon"
                        }
                    },
                    "received_payments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceivedPaymentResource"
                        }
                    },
                    "technicians": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TechnicianResourceDispatch"
                        }
                    },
                    "parts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PartResource"
                        }
                    }
                },
                "type": "object"
            },
            "Appliance": {
                "title": "Appliance",
                "description": "Model representing an appliance",
                "required": [
                    "title"
                ],
                "properties": {
                    "id": {
                        "description": "ID of the appliance",
                        "type": "integer"
                    },
                    "title": {
                        "description": "Title of the appliance",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Creation timestamp",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "ApplianceList": {
                "description": "Model representing an appliance list entry",
                "required": [
                    "serial_number",
                    "model_number",
                    "brand",
                    "appliance_id",
                    "task_id"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of the appliance list entry",
                        "type": "integer"
                    },
                    "serial_number": {
                        "description": "Serial number of the appliance",
                        "type": "string"
                    },
                    "model_number": {
                        "description": "Model number of the appliance",
                        "type": "string"
                    },
                    "brand": {
                        "description": "Brand of the appliance",
                        "type": "string"
                    },
                    "dop": {
                        "description": "Date of purchase",
                        "type": "string",
                        "format": "date",
                        "nullable": true
                    },
                    "appl_note": {
                        "description": "Additional note about the appliance",
                        "type": "string",
                        "nullable": true
                    },
                    "appliance_id": {
                        "description": "ID of the appliance type",
                        "type": "integer"
                    },
                    "task_id": {
                        "description": "ID of the task associated with this appliance",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Timestamp when the entry was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the entry was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "task": {
                        "$ref": "#/components/schemas/Task"
                    },
                    "appliance": {
                        "$ref": "#/components/schemas/Appliance"
                    }
                },
                "type": "object"
            },
            "Area": {
                "title": "Area",
                "description": "Model representing an area",
                "required": [
                    "title"
                ],
                "properties": {
                    "id": {
                        "description": "ID of the area",
                        "type": "integer"
                    },
                    "title": {
                        "description": "Title of the area",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Creation timestamp",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Last update timestamp",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "CustomerPhone": {
                "description": "Model representing a customer's phone number",
                "required": [
                    "task_id",
                    "phone_number"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of the customer phone entry",
                        "type": "integer"
                    },
                    "task_id": {
                        "description": "ID of the task associated with this phone number",
                        "type": "integer"
                    },
                    "phone_number": {
                        "description": "Customer's phone number",
                        "type": "string"
                    },
                    "note": {
                        "description": "Additional note regarding the phone number",
                        "type": "string",
                        "nullable": true
                    },
                    "created_at": {
                        "description": "Timestamp when the entry was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the entry was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "task": {
                        "$ref": "#/components/schemas/Task"
                    }
                },
                "type": "object"
            },
            "Distributor": {
                "required": [
                    "id",
                    "title"
                ],
                "properties": {
                    "id": {
                        "description": "Distributor's ID",
                        "type": "integer"
                    },
                    "title": {
                        "description": "Distributor's name",
                        "type": "string",
                        "example": "ACME Supplies"
                    },
                    "created_at": {
                        "description": "Date and time of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Date and time of the last update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Insurance": {
                "required": [
                    "id",
                    "title"
                ],
                "properties": {
                    "id": {
                        "description": "Insurance's ID",
                        "type": "integer"
                    },
                    "title": {
                        "description": "Insurance's name",
                        "type": "string",
                        "example": "ACME Supplies"
                    },
                    "created_at": {
                        "description": "Date and time of creation",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Date and time of the last update",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Note": {
                "description": "Model representing a note attached to a task",
                "required": [
                    "text",
                    "user_id",
                    "task_id"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of the note",
                        "type": "integer"
                    },
                    "text": {
                        "description": "Text content of the note",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "ID of the user who created the note",
                        "type": "integer"
                    },
                    "task_id": {
                        "description": "ID of the task to which the note is attached",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Timestamp when the note was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the note was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "task": {
                        "$ref": "#/components/schemas/Task"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object"
            },
            "Part": {
                "required": [
                    "part_number_id",
                    "task_id",
                    "appliance_id",
                    "distributor_id",
                    "user_id",
                    "status_id",
                    "qnt"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of the part",
                        "type": "integer"
                    },
                    "part_number_id": {
                        "description": "Identifier of the part number",
                        "type": "integer"
                    },
                    "task_id": {
                        "description": "Identifier of the associated task",
                        "type": "integer"
                    },
                    "appliance_id": {
                        "description": "Identifier of the associated appliance",
                        "type": "integer"
                    },
                    "distributor_id": {
                        "description": "Identifier of the distributor",
                        "type": "integer"
                    },
                    "user_id": {
                        "description": "Identifier of the user who added the part",
                        "type": "integer"
                    },
                    "status_id": {
                        "description": "Identifier of the part status",
                        "type": "integer"
                    },
                    "qnt": {
                        "description": "Quantity of the parts",
                        "type": "integer"
                    },
                    "dealer_price": {
                        "description": "Dealer price of the part",
                        "type": "number",
                        "format": "float"
                    },
                    "retail_price": {
                        "description": "Retail price of the part",
                        "type": "number",
                        "format": "float"
                    },
                    "distributor_name": {
                        "description": "Name of the distributor",
                        "type": "string"
                    },
                    "part_description": {
                        "description": "Description of the part",
                        "type": "string"
                    },
                    "distributor_invoice": {
                        "description": "Distributor invoice number",
                        "type": "string"
                    },
                    "eta": {
                        "description": "Estimated time of arrival for the part",
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_at": {
                        "description": "Timestamp when the part was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the part was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "partNumber": {
                        "$ref": "#/components/schemas/PartNumber"
                    },
                    "task": {
                        "$ref": "#/components/schemas/Task"
                    },
                    "appliance": {
                        "$ref": "#/components/schemas/Appliance"
                    },
                    "distributor": {
                        "$ref": "#/components/schemas/Distributor"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "status": {
                        "$ref": "#/components/schemas/PartStatus"
                    }
                },
                "type": "object"
            },
            "PartNumber": {
                "description": "Model representing part numbers",
                "required": [
                    "title"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of the part number",
                        "type": "integer"
                    },
                    "title": {
                        "description": "Title or name of the part number",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the part number was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the part number was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "parts": {
                        "description": "The parts associated with this part number",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Part"
                        }
                    }
                },
                "type": "object"
            },
            "PartStatus": {
                "required": [
                    "title"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of the part status",
                        "type": "integer"
                    },
                    "title": {
                        "description": "Title of the part status",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the part status was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the part status was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "parts": {
                        "$ref": "#/components/schemas/Part"
                    }
                },
                "type": "object"
            },
            "ReceivedPayment": {
                "title": "ReceivedPayment",
                "description": "Model representing a payment received for a task.",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the received payment.",
                        "type": "integer"
                    },
                    "task_id": {
                        "description": "Identifier of the associated task.",
                        "type": "integer"
                    },
                    "payment": {
                        "description": "Amount of payment received.",
                        "type": "number",
                        "format": "float"
                    },
                    "payment_status": {
                        "description": "Status of the payment.",
                        "type": "string",
                        "enum": [
                            "check",
                            "cash",
                            "credit card",
                            "eft",
                            "warranty",
                            "other"
                        ]
                    },
                    "pay_doc": {
                        "description": "Document related to the payment, if any.",
                        "type": "string"
                    },
                    "date_received": {
                        "description": "Date when the payment was received.",
                        "type": "string",
                        "format": "date"
                    },
                    "user_id": {
                        "description": "Identifier of the user who received the payment.",
                        "type": "integer"
                    },
                    "notes": {
                        "description": "Additional notes regarding the payment.",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the record was created.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the record was last updated.",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "Schedule": {
                "required": [
                    "date",
                    "start_time",
                    "end_time"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of the schedule",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "date": {
                        "description": "Date of the schedule",
                        "type": "string",
                        "format": "date",
                        "example": "2024-08-01"
                    },
                    "start_time": {
                        "description": "Start time of the schedule in HH:mm format",
                        "type": "string",
                        "format": "time",
                        "example": "09:00"
                    },
                    "end_time": {
                        "description": "End time of the schedule in HH:mm format",
                        "type": "string",
                        "format": "time",
                        "example": "17:00"
                    }
                },
                "type": "object"
            },
            "StatusChange": {
                "required": [
                    "task_id",
                    "status_id",
                    "user_id"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of the status change",
                        "type": "integer"
                    },
                    "task_id": {
                        "description": "ID of the task associated with the status change",
                        "type": "integer"
                    },
                    "status_id": {
                        "description": "ID of the status that was changed",
                        "type": "integer"
                    },
                    "user_id": {
                        "description": "ID of the user who made the status change",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Timestamp when the status change was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the status change was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "task": {
                        "$ref": "#/components/schemas/Task"
                    },
                    "status": {
                        "$ref": "#/components/schemas/TaskStatus"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "type": "object"
            },
            "Task": {
                "title": "Task",
                "description": "Task model",
                "required": [
                    "work_order",
                    "customer_name",
                    "status_id"
                ],
                "properties": {
                    "id": {
                        "description": "ID of the task",
                        "type": "integer"
                    },
                    "work_order": {
                        "description": "Work order number",
                        "type": "string"
                    },
                    "customer_name": {
                        "description": "Name of the customer",
                        "type": "string"
                    },
                    "street": {
                        "description": "Street address of the customer",
                        "type": "string"
                    },
                    "city": {
                        "description": "City of the customer",
                        "type": "string"
                    },
                    "zip": {
                        "description": "ZIP code of the customer",
                        "type": "string"
                    },
                    "authorization": {
                        "description": "Authorization code",
                        "type": "string"
                    },
                    "insurance_id": {
                        "description": "ID of the related insurance",
                        "type": "integer"
                    },
                    "status_id": {
                        "description": "ID of the task status",
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "Timestamp of when the task was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp of when the task was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "status": {
                        "$ref": "#/components/schemas/TaskStatus"
                    },
                    "notes": {
                        "description": "List of notes associated with the task",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Note"
                        }
                    },
                    "insurance": {
                        "$ref": "#/components/schemas/Insurance"
                    },
                    "phones": {
                        "description": "List of customer phones associated with the task",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CustomerPhone"
                        }
                    },
                    "applianceLists": {
                        "description": "List of appliance lists associated with the task",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApplianceList"
                        }
                    },
                    "files": {
                        "description": "List of files associated with the task",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TaskFile"
                        }
                    },
                    "taskBilling": {
                        "$ref": "#/components/schemas/TaskBilling"
                    },
                    "technicians": {
                        "description": "List of technicians associated with the task",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        }
                    },
                    "parts": {
                        "description": "List of parts associated with the task",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Part"
                        }
                    },
                    "receivedPayments": {
                        "description": "List of received payments associated with the task",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ReceivedPayment"
                        }
                    },
                    "statusChanges": {
                        "description": "List of status changes associated with the task",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StatusChange"
                        }
                    }
                },
                "type": "object"
            },
            "TaskBilling": {
                "description": "Model representing billing information for tasks",
                "required": [
                    "task_id",
                    "labor_cost",
                    "parts_cost",
                    "other_cost",
                    "tax_rate",
                    "total_cost"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of the billing entry",
                        "type": "integer"
                    },
                    "task_id": {
                        "description": "ID of the related task",
                        "type": "integer"
                    },
                    "labor_cost": {
                        "description": "Cost of labor",
                        "type": "number",
                        "format": "float"
                    },
                    "parts_cost": {
                        "description": "Cost of parts",
                        "type": "number",
                        "format": "float"
                    },
                    "other_cost": {
                        "description": "Other associated costs",
                        "type": "number",
                        "format": "float"
                    },
                    "tax_rate": {
                        "description": "Tax rate applied",
                        "type": "number",
                        "format": "float"
                    },
                    "total_cost": {
                        "description": "Total cost including tax",
                        "type": "number",
                        "format": "float"
                    },
                    "unpaid_amount": {
                        "description": "Amount that remains unpaid",
                        "type": "number",
                        "format": "float"
                    },
                    "invoice_number": {
                        "description": "Invoice number",
                        "type": "string"
                    },
                    "billed_job_note": {
                        "description": "Notes related to the billed job",
                        "type": "string"
                    },
                    "started_at": {
                        "description": "Timestamp when the billing was started",
                        "type": "string",
                        "format": "date-time"
                    },
                    "appointment_at": {
                        "description": "Scheduled appointment time",
                        "type": "string",
                        "format": "date-time"
                    },
                    "created_at": {
                        "description": "Timestamp when the billing entry was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the billing entry was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "task": {
                        "$ref": "#/components/schemas/Task"
                    }
                },
                "type": "object"
            },
            "TaskFile": {
                "required": [
                    "task_id",
                    "file_path",
                    "file_name"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of the task file",
                        "type": "integer"
                    },
                    "task_id": {
                        "description": "ID of the task associated with the file",
                        "type": "integer"
                    },
                    "file_path": {
                        "description": "Path to the file in storage",
                        "type": "string"
                    },
                    "file_name": {
                        "description": "Original name of the file",
                        "type": "string"
                    },
                    "file_note": {
                        "description": "Optional note related to the file",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the file record was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the file record was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "task": {
                        "$ref": "#/components/schemas/Task"
                    }
                },
                "type": "object"
            },
            "TaskStatus": {
                "description": "Model representing status of a task",
                "required": [
                    "title"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of the status",
                        "type": "integer"
                    },
                    "title": {
                        "description": "Title of the status",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Timestamp when the status was created",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "description": "Timestamp when the status was last updated",
                        "type": "string",
                        "format": "date-time"
                    },
                    "tasks": {
                        "$ref": "#/components/schemas/Task"
                    },
                    "statusChanges": {
                        "$ref": "#/components/schemas/StatusChange"
                    }
                },
                "type": "object"
            },
            "User": {
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "properties": {
                    "id": {
                        "description": "Unique identifier of the user",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the user",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "description": "Email address of the user",
                        "type": "string",
                        "format": "email",
                        "example": "john.doe@example.com"
                    },
                    "phone_number": {
                        "description": "Phone number of the user",
                        "type": "string",
                        "example": "+1234567890",
                        "nullable": true
                    },
                    "password": {
                        "description": "Password of the user (hashed)",
                        "type": "string",
                        "example": "hashed_password"
                    },
                    "email_verified_at": {
                        "description": "Email verification timestamp",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-07-01T00:00:00Z",
                        "nullable": true
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Additional/Appliances",
            "description": "API Endpoints for managing (additional) appliances"
        },
        {
            "name": "Additional/Areas",
            "description": "API Endpoints for managing (additional) areas"
        },
        {
            "name": "Additional/Distributors",
            "description": "API for managing (additional) distributors"
        },
        {
            "name": "Additional/Insurances",
            "description": "API for managing (additional) insurances"
        },
        {
            "name": "Additional/Schedules",
            "description": "API Endpoints for managing (additional) schedules"
        },
        {
            "name": "Additional/Users",
            "description": "API Endpoints for managing (additional) users"
        },
        {
            "name": "Auth",
            "description": "Endpoints for user authentication and authorization, including login, logout, and token management."
        },
        {
            "name": "Received Payments",
            "description": "API Endpoints for managing received payments"
        },
        {
            "name": "TechnicianPay",
            "description": "Operations related to managing technician payments."
        },
        {
            "name": "Common/Tasks",
            "description": "API Endpoints for managing tasks"
        },
        {
            "name": "Task-Technicians",
            "description": "Operations about technicians"
        },
        {
            "name": "Task Status History",
            "description": "API Endpoints for managing task status history"
        },
        {
            "name": "Part",
            "description": "Operations related to parts"
        },
        {
            "name": "Task/ApplianceList",
            "description": "Operations related to appliance lists"
        },
        {
            "name": "Task/CustomerPhone",
            "description": "Operations related to customer phone numbers"
        },
        {
            "name": "Task/Files",
            "description": "API Endpoints for managing task files"
        },
        {
            "name": "Task/Notes",
            "description": "Operations related to notes"
        },
        {
            "name": "Task/Task",
            "description": "Operations related to tasks"
        }
    ]
}